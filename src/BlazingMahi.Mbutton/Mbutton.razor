<button type="@Type" class="@Class" disabled="@Disabled" @onclick="ButtonClicked">
   @((MarkupString)Spinner) @ChildContent
</button>

@code {

    /// <summary>
    /// Defaults to button.
    /// </summary>
    [Parameter]
    public string Type { get; set; } = "button";

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool DisableOnClick { get; set; } = false;

    [Parameter]
    public EventCallback OnClick { get; set; }

    [Parameter]
    public bool SpinnerOnDisabled { get; set; } = false;

    [Parameter]
    public string SpinnerClass { get; set; } = "spinner-border spinner-border-sm";

    [Parameter]
    public int Delay { get; set; } = 10;

    public bool Disabled = false;
    public string Spinner = "";

    private async Task ButtonClicked()
    {
        if (DisableOnClick)
        {
            Disabled = true;
            if (SpinnerOnDisabled)
            {
                Spinner = $@"<span class=""{SpinnerClass}"" aria-hidden=""true""></span>";
            }
        }        
        await Task.Delay(Delay);
        await OnClick.InvokeAsync("clicked");
    }

    public void EnableButton()
    {
        Disabled = false;
        if (SpinnerOnDisabled){Spinner = "";}
        StateHasChanged();
    }

    public void DisableButton()
    {
        Disabled = true;
        if (SpinnerOnDisabled)
        {
            Spinner = $@"<span class=""{SpinnerClass}"" aria-hidden=""true""></span>";
        }
        StateHasChanged();
    }

}
